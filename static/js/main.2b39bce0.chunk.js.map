{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["console","log","Date","position","theDevices","DeviceRow","dev","isSelected","onClick","onDisableLocation","ListItem","key","name","button","selected","ListItemText","primary","IconButton","aria-label","size","DeviceMarker","device","isTypeSelected","Marker","icon","divIcon","iconSize","html","renderToStaticMarkup","className","style","color","Popup","App","React","useState","selection","setSelection","type","selectedType","setSelectedType","devices","setDevices","showAll","setShowAll","setLocation","index","newLocation","tempDevices","slice","find","d","items","center","zoom","width","height","e","forEach","latlng","lat","lng","TileLayer","attribution","url","map","devType","includes","Paper","top","right","bottom","justifyContent","alignItems","zIndex","margin","ToggleButtonGroup","value","exclusive","onChange","ToggleButton","disabled","display","verticalAlign","InputLabel","id","fontSize","Switch","inputProps","target","checked","Select","MenuItem","List","filter","s","concat","sort","handleSelectionClick","undefined","TextField","label","multiline","rows","variant","left","lineHeight","JSON","stringify","parse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b39bce0.chunk.js","sourcesContent":["import {\n    InputLabel, List, ListItem, ListItemText, MenuItem, Select, TextField, IconButton, Switch\n} from '@material-ui/core';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport Paper from '@material-ui/core/Paper';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Icon from '@material-ui/core/Icon';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { divIcon } from 'leaflet';\nimport { Map as LeafletMap, Marker, Popup, TileLayer } from \"react-leaflet\";\n// import './App.css';\nimport useStateWithCallback from 'use-state-with-callback';\n\nconsole.log(new Date());\n\nconst position = [32.081128, 34.779729];\nconst theDevices = [\n    {\n        \"type\": \"wind\",\n        \"items\": [\n            { \"name\": \"Device 1\", \"position\": [32.08, 34.77] },\n            { \"name\": \"Device 2\" },\n            { \"name\": \"Device 3\", \"position\": [32.07, 34.78] },\n            { \"name\": \"Device 4\" }]\n    },\n    {\n        \"type\": \"water\",\n        \"items\": [\n            { \"name\": \"Device 5\" },\n            { \"name\": \"Device 6\", \"position\": [32.080320121040344, 34.78262901306153] },\n            { \"name\": \"Device 7\" },\n            { \"name\": \"Device 8\", \"position\": [32.0678106134499, 34.768552780151374] }\n        ]\n    }\n];\n\nconst DeviceRow = ({ dev, isSelected, onClick, onDisableLocation }) => (\n    <ListItem\n        key={dev.name}\n        button\n        selected={isSelected}\n        onClick={onClick}\n    >\n        <ListItemText primary={dev.name} />\n        {!dev.position ? null :\n            <IconButton aria-label=\"Disable location\" size=\"small\"\n                onClick={onDisableLocation}\n            >\n                <LocationOnIcon />\n            </IconButton>\n        }\n    </ListItem>\n)\n\nconst DeviceMarker = ({ device, isSelected, isTypeSelected }) =>\n    (\n        <Marker position={device.position} key={device.name}\n            icon={divIcon({\n                iconSize: [20, 20],\n                html: renderToStaticMarkup(\n                    <i className=\" fa fa-map-marker-alt fa-2x\"\n                        style={{ color: (isTypeSelected ? (isSelected ? '#297A31' : '#1B2C6F') : '#888888') }}\n                    />\n                )\n            })}\n        >\n            <Popup>\n                {device.name + ' at (' + device.position + ')'}\n            </Popup>\n        </Marker >\n    )\n\nconst App = () => {\n    const [selection, setSelection] = React.useState([]);\n    const [selectedType, setSelectedType] = React.useState(theDevices[0].type);\n    const [devices, setDevices] = React.useState(theDevices);\n    const [showAll, setShowAll] = React.useState(false);\n\n    const setLocation = (type, index, newLocation) => {\n        let tempDevices = devices.slice();\n        tempDevices.find(d => d.type === type).items[index].position = newLocation;\n        setDevices(tempDevices);\n    };\n\n    const handleSelectionClick = (index) => {\n        if (selection.includes(index)) {\n            setSelection(selection.filter(s => s !== index));\n        } else {\n            setSelection(selection.concat([index]).sort());\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <LeafletMap center={position} zoom={14}\n                style={{ width: '100%', height: '100vh' }}\n                onClick={e => selection.forEach(index => {\n                    setLocation(selectedType, index, [e.latlng.lat, e.latlng.lng]);\n                    setSelection([]);\n                })}\n            >\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {\n                    devices.map(devType => {\n                        if (showAll || (devType.type === selectedType)) {\n                            return devType.items.map((dev, index) => {\n                                if (dev.position) {\n                                    return <DeviceMarker key={dev.name} device={dev}\n                                        isSelected={selection.includes(index)}\n                                        isTypeSelected={devType.type === selectedType}\n                                    />\n                                } else {\n                                    return null;\n                                }\n                            });\n                        } else {\n                            return null;\n                        }\n                    })\n                }\n            </LeafletMap>\n            <Paper\n                style={{ position: 'absolute', top: 50, width: '30%', right: 50, bottom: 50, justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}\n            >\n                <div\n                    style={{ margin: 10 }}\n                >\n                    <ToggleButtonGroup\n                        style={{ margin: 5 }}\n                        size=\"small\"\n                        value={\"Point\"}\n                        exclusive\n                        onChange={e => { }}\n                    >\n                        <ToggleButton value=\"Point\">\n                            Point\n                        </ToggleButton>\n                        <ToggleButton value=\"Line\" disabled>\n                            Line\n                        </ToggleButton>\n                        <ToggleButton value=\"Curve\" disabled>\n                            Curve\n                        </ToggleButton>\n                        <ToggleButton value=\"Rectangle\" disabled>\n                            Rect\n                        </ToggleButton>\n                        <ToggleButton value=\"Polyline\" disabled>\n                            Poly\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                    <div style={{ width: '100%' }}>\n                        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n                            <InputLabel id=\"show-all-types\" style={{ fontSize: 10 }}>Show all</InputLabel>\n                            <Switch id=\"show-all-types\" color=\"primary\" inputProps={{ 'aria-label': 'primary checkbox' }}\n                                value={showAll}\n                                onChange={e => setShowAll(e.target.checked)}\n                            />\n                        </div>\n                        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n                            <InputLabel id=\"select-type\" style={{ fontSize: 10 }}>Device Type</InputLabel>\n                            <Select\n                                id=\"select-type\"\n                                value={selectedType}\n                                onChange={e => {\n                                    setSelection([]);\n                                    setSelectedType(e.target.value);\n                                }}\n                            >\n                                {\n                                    devices.map(dev => (\n                                        <MenuItem key={dev.type} value={dev.type}>\n                                            {dev.type}\n                                        </MenuItem>\n                                    ))\n                                }\n                            </Select>\n                        </div>\n                    </div>\n\n                    <List>\n                        {\n                            devices.find(d => d.type === selectedType).items.map((dev, index) =>\n                                <DeviceRow\n                                    key={dev.name}\n                                    dev={dev}\n                                    isSelected={selection.includes(index)}\n                                    onClick={e => handleSelectionClick(index)}\n                                    onDisableLocation={e => setLocation(selectedType, index, undefined)}\n                                />\n                            )\n                        }\n                    </List >\n                </div>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Json\"\n                    multiline\n                    rows=\"10\"\n                    variant={\"outlined\"}\n                    style={{ position: 'absolute', bottom: 10, right: 10, left: 10, justifyContent: 'center' }}\n                    inputProps={{ style: { fontSize: 10, lineHeight: 1 } }}\n                    value={JSON.stringify(devices, null, 2)}\n                    onChange={e => setDevices(JSON.parse(e.target.value))}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}