{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["console","log","Date","lastIndex","position","theDevices","DeviceRow","dev","isSelected","onClick","onDisableLocation","ListItem","key","name","button","selected","ListItemText","primary","IconButton","aria-label","size","DeviceMarker","device","isTypeSelected","Marker","title","icon","divIcon","iconSize","html","renderToStaticMarkup","className","style","color","Popup","lerp","from","to","t","App","startPoint","hoverPoint","currPolyline","mapElement","useRef","React","useState","selection","setSelection","type","selectedType","setSelectedType","devices","setDevices","showAll","setShowAll","shape","setShape","setLocations","indices","newLocations","tempDevices","slice","typeDevices","find","d","items","i","length","Math","min","center","zoom","ref","width","height","e","latlng","lat","lng","locations","num","ret","Array","resampleLine","undefined","remove","onMouseMove","setLatLngs","window","L","polyline","addTo","current","leafletElement","TileLayer","attribution","url","map","devType","index","includes","Paper","top","right","bottom","justifyContent","alignItems","zIndex","margin","ToggleButtonGroup","value","exclusive","onChange","newShape","ToggleButton","disabled","display","verticalAlign","InputLabel","id","fontSize","Switch","inputProps","target","checked","Select","MenuItem","List","doRange","sel","low","high","max","filter","s","push","concat","sort","handleSelectionClick","shiftKey","TextField","label","multiline","rows","variant","left","lineHeight","JSON","stringify","parse","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a1ad0a5.chunk.js","sourcesContent":["import {\n    InputLabel, List, ListItem, ListItemText, MenuItem, Select, TextField, IconButton, Switch\n} from '@material-ui/core';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport Paper from '@material-ui/core/Paper';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Icon from '@material-ui/core/Icon';\nimport React, { useRef } from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { divIcon } from 'leaflet';\nimport { Map as LeafletMap, Marker, Popup, TileLayer, Polyline } from \"react-leaflet\";\n// import './App.css';\nimport useStateWithCallback from 'use-state-with-callback';\n\nconsole.log(new Date());\n\nconst position = [32.081128, 34.779729];\nconst theDevices = [\n    {\n        \"type\": \"wind\",\n        \"items\": [\n            { \"name\": \"Device 1\", \"position\": [32.08, 34.77] },\n            { \"name\": \"Device 2\" },\n            { \"name\": \"Device 3\", \"position\": [32.07, 34.78] },\n            { \"name\": \"Device 4\" }]\n    },\n    {\n        \"type\": \"water\",\n        \"items\": [\n            { \"name\": \"Device 5\" },\n            { \"name\": \"Device 6\", \"position\": [32.080320121040344, 34.78262901306153] },\n            { \"name\": \"Device 7\" },\n            { \"name\": \"Device 8\", \"position\": [32.0678106134499, 34.768552780151374] }\n        ]\n    }\n];\n\nconst DeviceRow = ({ dev, isSelected, onClick, onDisableLocation }) => (\n    <ListItem\n        key={dev.name}\n        button\n        selected={isSelected}\n        onClick={onClick}\n    >\n        <ListItemText primary={dev.name} />\n        {!dev.position ? null :\n            <IconButton aria-label=\"Disable location\" size=\"small\"\n                onClick={onDisableLocation}\n            >\n                <LocationOnIcon />\n            </IconButton>\n        }\n    </ListItem>\n)\n\nconst DeviceMarker = ({ device, isSelected, isTypeSelected }) =>\n    (\n        <Marker key={device.name}\n            position={device.position}\n            title={device.name}\n            icon={divIcon({\n                iconSize: [20, 20],\n                html: renderToStaticMarkup(\n                    <i className=\" fa fa-map-marker-alt fa-2x\"\n                        style={{ color: (isTypeSelected ? (isSelected ? '#297A31' : '#1B2C6F') : '#888888') }}\n                    />\n                )\n            })}\n        >\n            <Popup>\n                {device.name + ' at (' + device.position + ')'}\n            </Popup>\n        </Marker >\n    )\n\nconst lerp = (from, to, t) => {\n    return [from[0] * (1 - t) + to[0] * t, from[1] * (1 - t) + to[1] * t];\n};\n\nconst resampleLine = (from, to, num) => {\n    let ret = new Array(num);\n    ret[0] = from;\n    for (let i = 1; i < num - 1; ++i) {\n        ret[i] = lerp(from, to, i / (num - 1));\n    }\n    ret[num - 1] = to;\n    return ret;\n}\n\nlet lastIndex;\n\nconst App = () => {\n    let startPoint, hoverPoint, currPolyline;\n    const mapElement = useRef(null);\n\n    const [selection, setSelection] = React.useState([]);\n    const [selectedType, setSelectedType] = React.useState(theDevices[0].type);\n    const [devices, setDevices] = React.useState(theDevices);\n    const [showAll, setShowAll] = React.useState(false);\n    const [shape, setShape] = React.useState(\"Point\");\n\n    const setLocations = (type, indices, newLocations) => {\n        let tempDevices = devices.slice();\n        let typeDevices = tempDevices.find(d => d.type === type).items;\n        for (let i = 0; i < indices.length; ++i) {\n            typeDevices[indices[i]].position = newLocations[Math.min(i, newLocations.length - 1)];\n        }\n        setDevices(tempDevices);\n    };\n\n    const handleSelectionClick = (index, doRange) => {\n        let sel = [];\n        if (!doRange) {\n            if (selection.includes(index)) {\n                sel = selection.filter(s => s !== index);\n            } else {\n                sel = selection.concat([index]);\n            }\n        } else if (lastIndex !== undefined) {\n            const low = Math.min(index, lastIndex), high = Math.max(index, lastIndex);\n            sel = selection.filter(s => s < low);\n            for (let i = low; i <= high; ++i) {\n                sel.push(i);\n            }\n            sel.concat(selection.filter(s => s > high));\n        }\n        setSelection(sel.sort());\n        lastIndex = index;\n    }\n\n    const handleMapClick = e => {\n        if (shape === 'Point' && selection.length >= 1) {\n            setLocations(selectedType, selection, [[e.latlng.lat, e.latlng.lng]]);\n            setSelection([]);\n        } else if (shape === 'Line' && selection.length >= 2) {\n            if (!startPoint) {\n                startPoint = [e.latlng.lat, e.latlng.lng];\n            } else {\n                const locations = resampleLine(startPoint, [e.latlng.lat, e.latlng.lng], selection.length);\n                setLocations(selectedType, selection, locations);\n                startPoint = undefined;\n                currPolyline.remove();\n                currPolyline = undefined;\n                setSelection([]);\n            }\n        }\n    };\n\n    const handleMouseMove = e => {\n        hoverPoint = e.latlng;\n        // console.log(currPolyline);\n        if (startPoint) {\n            if (!currPolyline) {\n                currPolyline = window.L.polyline([hoverPoint, startPoint]).addTo(mapElement.current.leafletElement);\n            } else {\n                currPolyline.setLatLngs([hoverPoint, startPoint]);\n            }\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <LeafletMap center={position} zoom={14}\n                ref={mapElement}\n                style={{ width: '100%', height: '100vh' }}\n                onClick={handleMapClick}\n                onMouseMove={handleMouseMove}\n            >\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {\n                    devices.map(devType => {\n                        if (showAll || (devType.type === selectedType)) {\n                            return devType.items.map((dev, index) => {\n                                if (dev.position) {\n                                    return <DeviceMarker key={dev.name} device={dev}\n                                        isSelected={selection.includes(index)}\n                                        isTypeSelected={devType.type === selectedType}\n                                    />\n                                } else {\n                                    return null;\n                                }\n                            });\n                        } else {\n                            return null;\n                        }\n                    })\n                }\n            </LeafletMap>\n            <Paper\n                style={{ position: 'absolute', top: 50, width: '30%', right: 50, bottom: 50, justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}\n            >\n                <div\n                    style={{ margin: 10 }}\n                >\n                    <ToggleButtonGroup\n                        style={{ margin: 5 }}\n                        size=\"small\"\n                        value={shape}\n                        exclusive\n                        onChange={(e, newShape) => setShape(newShape)}\n                    >\n                        <ToggleButton value=\"Point\">\n                            Point\n                        </ToggleButton>\n                        <ToggleButton value=\"Line\">\n                            Line\n                        </ToggleButton>\n                        <ToggleButton value=\"Curve\" disabled>\n                            Curve\n                        </ToggleButton>\n                        <ToggleButton value=\"Rectangle\" disabled>\n                            Rect\n                        </ToggleButton>\n                        <ToggleButton value=\"Polyline\" disabled>\n                            Poly\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                    <div style={{ width: '100%' }}>\n                        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n                            <InputLabel id=\"show-all-types\" style={{ fontSize: 10 }}>Show all</InputLabel>\n                            <Switch id=\"show-all-types\" color=\"primary\" inputProps={{ 'aria-label': 'primary checkbox' }}\n                                value={showAll}\n                                onChange={e => setShowAll(e.target.checked)}\n                            />\n                        </div>\n                        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n                            <InputLabel id=\"select-type\" style={{ fontSize: 10 }}>Device Type</InputLabel>\n                            <Select\n                                id=\"select-type\"\n                                value={selectedType}\n                                onChange={e => {\n                                    setSelection([]);\n                                    setSelectedType(e.target.value);\n                                }}\n                            >\n                                {\n                                    devices.map(dev => (\n                                        <MenuItem key={dev.type} value={dev.type}>\n                                            {dev.type}\n                                        </MenuItem>\n                                    ))\n                                }\n                            </Select>\n                        </div>\n                    </div>\n\n                    <List>\n                        {\n                            devices.find(d => d.type === selectedType).items.map((dev, index) =>\n                                <DeviceRow\n                                    key={dev.name}\n                                    dev={dev}\n                                    isSelected={selection.includes(index)}\n                                    onClick={e => handleSelectionClick(index, e.shiftKey)}\n                                    onDisableLocation={e => setLocations(selectedType, [index], [undefined])}\n                                />\n                            )\n                        }\n                    </List >\n                </div>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Json\"\n                    multiline\n                    rows=\"10\"\n                    variant={\"outlined\"}\n                    style={{ position: 'absolute', bottom: 10, right: 10, left: 10, justifyContent: 'center' }}\n                    inputProps={{ style: { fontSize: 10, lineHeight: 1 } }}\n                    value={JSON.stringify(devices, null, 2)}\n                    onChange={e => setDevices(JSON.parse(e.target.value))}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}