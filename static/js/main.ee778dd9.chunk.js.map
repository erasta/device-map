{"version":3,"sources":["Utils.js","DataContents.js","App.jsx","serviceWorker.js","index.js"],"names":["lerp","from","to","t","distance","p","q","dx","dy","Math","sqrt","findPositionOnPolyline","points","pos","curr","i","length","dist","after","fraction","resamplePolyline","num","total","polylineLength","resampled","Array","catmullRom","p0","p1","p2","p3","v0","v1","t2","splineCurveOne","intPoint","floor","weight","splineCurve","amount","ret","arcCurveFromPoints","v2","a1","atan2","a2","center","radius","fromAngle","toAngle","PI","a","cos","sin","arcCurve","theDevices","console","log","Date","lastIndex","markedPoints","position","DeviceRow","dev","isSelected","onClick","onDisableLocation","ListItem","key","name","button","selected","ListItemText","primary","IconButton","aria-label","size","DeviceMarker","device","isTypeSelected","Marker","title","icon","divIcon","iconSize","html","renderToStaticMarkup","className","style","color","Popup","Boolean","window","location","hostname","match","ReactDOM","render","mapElement","useRef","currPolyline","React","useState","selection","setSelection","type","selectedType","setSelectedType","devices","setDevices","showAll","setShowAll","shape","setShape","undefined","startPoint","setStartPoint","changeLocations","indices","newLocations","tempDevices","slice","typeDevices","find","d","items","min","renderShape","hoverPoint","concat","push","current","leafletElement","setLatLngs","curve","zoom","ref","width","height","e","latlng","lat","lng","onMouseMove","onMouseOut","TileLayer","attribution","url","map","devType","index","includes","Polyline","positions","Paper","top","right","bottom","justifyContent","alignItems","zIndex","margin","ToggleButtonGroup","value","exclusive","onChange","newShape","ToggleButton","disabled","Button","variant","display","verticalAlign","InputLabel","id","fontSize","Switch","inputProps","target","checked","Select","MenuItem","overflow","List","doRange","sel","low","high","max","filter","s","sort","handleSelectionClick","shiftKey","TextField","multiline","left","lineHeight","JSON","stringify","parse","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee778dd9.chunk.js","sourcesContent":["export const lerp = (from, to, t) => {\n    return [from[0] * (1 - t) + to[0] * t, from[1] * (1 - t) + to[1] * t];\n};\n\nexport const resampleLine = (from, to, num) => {\n    let ret = new Array(num);\n    ret[0] = from;\n    for (let i = 1; i < num - 1; ++i) {\n        ret[i] = lerp(from, to, i / (num - 1));\n    }\n    ret[num - 1] = to;\n    return ret;\n}\n\nexport const distance = (p, q) => {\n    const dx = p[0] - q[0];\n    const dy = p[1] - q[1];\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const polylineLength = (points) => {\n    let total = 0;\n    for (let i = 0; i < points.length - 1; ++i) {\n        total += distance(points[i], points[i + 1]);\n    }\n    return total;\n}\n\nexport const findPositionOnPolyline = (points, pos) => {\n    let curr = 0;\n    for (let i = 0; i < points.length - 1; ++i) {\n        const dist = distance(points[i], points[i + 1]);\n        const after = curr + dist;\n        if (after <= pos) {\n            curr = after;\n        } else {\n            const fraction = (pos - curr) / dist;\n            return lerp(points[i], points[i + 1], fraction);\n        }\n    }\n    return points[points.length - 1];\n}\n\nexport const resamplePolyline = (points, num) => {\n    const total = polylineLength(points);\n    let resampled = new Array(num);\n    for (let i = 0; i < num; ++i) {\n        resampled[i] = findPositionOnPolyline(points, i / (num - 1) * total);\n    }\n    return resampled;\n}\n\nexport const catmullRom = (t, p0, p1, p2, p3) => {\n    var v0 = (p2 - p0) * 0.5;\n    var v1 = (p3 - p1) * 0.5;\n    var t2 = t * t;\n    var t3 = t * t2;\n    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (- 3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n}\n\nexport const splineCurveOne = (points, t) => {\n    var p = (points.length - 1) * t;\n\n    var intPoint = Math.floor(p);\n    var weight = p - intPoint;\n\n    var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n    var p1 = points[intPoint];\n    var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\n    return [\n        catmullRom(weight, p0[0], p1[0], p2[0], p3[0]),\n        catmullRom(weight, p0[1], p1[1], p2[1], p3[1])\n    ];\n};\n\nexport const splineCurve = (points, amount) => {\n    let ret = new Array(amount);\n    for (let i = 0; i < amount; ++i) {\n        ret[i] = splineCurveOne(points, i / amount);\n    }\n    return ret;\n}\n\nexport const arcCurve = (center, radius, fromAngle, toAngle, amount) => {\n    // console.log(center, radius, fromAngle, toAngle);\n    if (toAngle > fromAngle) toAngle -= Math.PI * 2;\n    let ret = new Array(amount);\n    for (let i = 0; i < amount; ++i) {\n        const t = i / (amount - 1);\n        const a = fromAngle * (1 - t) + toAngle * t;\n        ret[i] = [center[0] + radius * Math.cos(a), center[1] + radius * Math.sin(a)];\n    }\n    // console.log(ret);\n    return ret;\n}\n\nexport const arcCurveFromPoints = (points, amount) => {\n    const p = points[0], v1 = points[1], v2 = points[2];\n    const a1 = Math.atan2(v1[1] - p[1], v1[0] - p[0]);\n    const a2 = Math.atan2(v2[1] - p[1], v2[0] - p[0]);\n    const curve = arcCurve(p, distance(p, v1), a1, a2, amount);\n    return curve;\n}","export const theDevices = [\n    {\n        \"type\": \"wind\",\n        \"items\": [\n            { \"name\": \"Device 1\", \"position\": [32.08, 34.77] },\n            { \"name\": \"Device 2\" },\n            { \"name\": \"Device 3\", \"position\": [32.07, 34.78] },\n            { \"name\": \"Device 4\" },\n            { \"name\": \"Device 41\" },\n            { \"name\": \"Device 42\" },\n            { \"name\": \"Device 43\" },\n            { \"name\": \"Device 44\" },\n            { \"name\": \"Device 45\" },\n            // { \"name\": \"Device 46\" },\n            // { \"name\": \"Device 47\" },\n            // { \"name\": \"Device 51\" },\n            // { \"name\": \"Device 52\" },\n            // { \"name\": \"Device 53\" },\n            // { \"name\": \"Device 54\" },\n            // { \"name\": \"Device 55\" },\n            // { \"name\": \"Device 56\" },\n            { \"name\": \"Device 57\" }]\n    },\n    {\n        \"type\": \"water\",\n        \"items\": [\n            { \"name\": \"Device 5\" },\n            { \"name\": \"Device 6\", \"position\": [32.080320121040344, 34.78262901306153] },\n            { \"name\": \"Device 7\" },\n            { \"name\": \"Device 8\", \"position\": [32.0678106134499, 34.768552780151374] }\n        ]\n    }\n];\n","import {\n    InputLabel, List, ListItem, ListItemText, MenuItem, Select, TextField, IconButton, Switch, Button\n} from '@material-ui/core';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport Paper from '@material-ui/core/Paper';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Icon from '@material-ui/core/Icon';\nimport React, { useRef } from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { divIcon } from 'leaflet';\nimport { Map as LeafletMap, Marker, Popup, TileLayer, Polyline } from \"react-leaflet\";\n// import './App.css';\nimport useStateWithCallback from 'use-state-with-callback';\nimport { resamplePolyline, splineCurve, arcCurveFromPoints } from './Utils';\nimport { theDevices } from './DataContents';\n\nconsole.log(new Date());\n\nconst position = [32.081128, 34.779729];\n\nconst DeviceRow = ({ dev, isSelected, onClick, onDisableLocation }) => (\n    <ListItem\n        key={dev.name}\n        button\n        selected={isSelected}\n        onClick={onClick}\n    >\n        <ListItemText primary={dev.name} />\n        {!dev.position ? null :\n            <IconButton aria-label=\"Disable location\" size=\"small\"\n                onClick={onDisableLocation}\n            >\n                <LocationOnIcon />\n            </IconButton>\n        }\n    </ListItem>\n)\n\nconst DeviceMarker = ({ device, isSelected, isTypeSelected }) =>\n    (\n        <Marker key={device.name}\n            position={device.position}\n            title={device.name}\n            icon={divIcon({\n                iconSize: [20, 20],\n                html: renderToStaticMarkup(\n                    <i className=\" fa fa-map-marker-alt fa-2x\"\n                        style={{ color: (isTypeSelected ? (isSelected ? '#297A31' : '#1B2C6F') : '#888888') }}\n                    />\n                )\n            })}\n        >\n            <Popup>\n                {device.name + ' at (' + device.position + ')'}\n            </Popup>\n        </Marker >\n    )\n\nlet lastIndex;\nlet markedPoints;\n\nexport const App = () => {\n    const mapElement = useRef(null);\n    const currPolyline = useRef(null);\n\n    const [selection, setSelection] = React.useState([]);\n    const [selectedType, setSelectedType] = React.useState(theDevices[0].type);\n    const [devices, setDevices] = React.useState(theDevices);\n    const [showAll, setShowAll] = React.useState(false);\n    const [shape, setShape] = React.useState(\"Point\");\n    const [startPoint, setStartPoint] = React.useState(undefined);\n\n    const changeLocations = (type, indices, newLocations) => {\n        let tempDevices = devices.slice();\n        let typeDevices = tempDevices.find(d => d.type === type).items;\n        for (let i = 0; i < indices.length; ++i) {\n            typeDevices[indices[i]].position = newLocations[Math.min(i, newLocations.length - 1)];\n        }\n        return tempDevices;\n    };\n\n    const handleSelectionClick = (index, doRange) => {\n        let sel = [];\n        if (!doRange) {\n            if (selection.includes(index)) {\n                sel = selection.filter(s => s !== index);\n            } else {\n                sel = selection.concat([index]);\n            }\n        } else if (lastIndex !== undefined) {\n            const low = Math.min(index, lastIndex), high = Math.max(index, lastIndex);\n            sel = selection.filter(s => s < low);\n            for (let i = low; i <= high; ++i) {\n                sel.push(i);\n            }\n            sel.concat(selection.filter(s => s > high));\n        }\n        setSelection(sel.sort());\n        lastIndex = index;\n    }\n\n    const handleMapClick = e => {\n        // if (selection.length < 1) return;\n        if (shape === 'Point') {\n            changeLocations(selectedType, selection, [[e.latlng.lat, e.latlng.lng]]);\n            setSelection([]);\n        } else {\n            if (!startPoint) {\n                setStartPoint([e.latlng.lat, e.latlng.lng]);\n                markedPoints = [];\n            } else {\n                markedPoints.push([e.latlng.lat, e.latlng.lng]);\n            }\n        }\n    };\n\n    const handlePutDevices = () => {\n        let positions = [startPoint].concat(markedPoints);\n        if (shape === 'Polyline') {\n            positions = resamplePolyline(positions, selection.length);\n        } else if (shape === 'Curve') {\n            positions = resamplePolyline(splineCurve(positions, 100), selection.length);\n        } else if (shape === 'Arc') {\n            positions = resamplePolyline(arcCurveFromPoints(positions, 400), selection.length);\n        }\n        let tempDevices = changeLocations(selectedType, selection, positions);\n        setDevices(tempDevices);\n        setStartPoint(undefined);\n        setSelection([]);\n    };\n\n    const renderShape = (hoverPoint) => {\n        if (startPoint) {\n            let points = [startPoint].concat(markedPoints);\n            if (hoverPoint) {\n                points.push(hoverPoint);\n            }\n            if (shape === 'Polyline') {\n                currPolyline.current.leafletElement.setLatLngs(points);\n            } else if (shape === 'Curve') {\n                const curve = splineCurve(points, 100);\n                currPolyline.current.leafletElement.setLatLngs(curve);\n            } else if (shape === 'Arc') {\n                if (points.length === 2) {\n                    currPolyline.current.leafletElement.setLatLngs(points);\n                } else {\n                    const curve = arcCurveFromPoints(points, 400);\n                    currPolyline.current.leafletElement.setLatLngs([points[0]].concat(curve));\n                }\n            }\n        }\n    };\n\n    const handleMouseMove = e => {\n        renderShape([e.latlng.lat, e.latlng.lng]);\n    };\n\n    const handleMouseOut = () => {\n        renderShape();\n    };\n\n    return (\n        <div className=\"App\">\n            <LeafletMap center={position} zoom={14}\n                ref={mapElement}\n                style={{ width: '100%', height: '100vh' }}\n                onClick={handleMapClick}\n                onMouseMove={handleMouseMove}\n                onMouseOut={handleMouseOut}\n            >\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {\n                    devices.map(devType => {\n                        if (showAll || (devType.type === selectedType)) {\n                            return devType.items.map((dev, index) => {\n                                if (dev.position) {\n                                    return <DeviceMarker key={dev.name} device={dev}\n                                        isSelected={selection.includes(index)}\n                                        isTypeSelected={devType.type === selectedType}\n                                    />\n                                } else {\n                                    return null;\n                                }\n                            });\n                        } else {\n                            return null;\n                        }\n                    })\n                }\n\n                {\n                    !startPoint ? null :\n                        <Polyline positions={[startPoint, startPoint]} ref={currPolyline} />\n                }\n\n            </LeafletMap>\n            <Paper\n                style={{ position: 'absolute', height: '80%', top: 50, width: '30%', right: 50, bottom: 50, justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}\n            >\n                <div\n                    style={{ margin: 10 }}\n                >\n                    <ToggleButtonGroup\n                        style={{ margin: 5 }}\n                        size=\"small\"\n                        value={shape}\n                        exclusive\n                        onChange={(e, newShape) => setShape(newShape)}\n                    >\n                        <ToggleButton value=\"Point\">\n                            Point\n                        </ToggleButton>\n                        <ToggleButton value=\"Polyline\">\n                            Poly\n                        </ToggleButton>\n                        <ToggleButton value=\"Curve\">\n                            Curve\n                        </ToggleButton>\n                        <ToggleButton value=\"Arc\">\n                            Arc\n                        </ToggleButton>\n                        <ToggleButton value=\"Rectangle\" disabled>\n                            Rect\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                    <Button variant=\"contained\" color=\"primary\"\n                        disabled={shape === 'Point'}\n                        style={{ margin: 5 }}\n                        onClick={handlePutDevices}\n                    >\n                        Put devices\n                    </Button>\n                    <div style={{ width: '100%' }}>\n                        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n                            <InputLabel id=\"show-all-types\" style={{ fontSize: 10 }}>Show all</InputLabel>\n                            <Switch id=\"show-all-types\" color=\"primary\" inputProps={{ 'aria-label': 'primary checkbox' }}\n                                value={showAll}\n                                onChange={e => setShowAll(e.target.checked)}\n                            />\n                        </div>\n                        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n                            <InputLabel id=\"select-type\" style={{ fontSize: 10 }}>Device Type</InputLabel>\n                            <Select\n                                id=\"select-type\"\n                                value={selectedType}\n                                onChange={e => {\n                                    setSelection([]);\n                                    setSelectedType(e.target.value);\n                                }}\n                            >\n                                {\n                                    devices.map(dev => (\n                                        <MenuItem key={dev.type} value={dev.type}>\n                                            {dev.type}\n                                        </MenuItem>\n                                    ))\n                                }\n                            </Select>\n                        </div>\n                    </div>\n\n                    <div style={{ overflow: 'scroll', height: 'inherit', display: 'block' }}\n                    // inputProps={{ style: { overflow: 'scroll' } }}\n                    >\n                        <List>\n                            {\n                                devices.find(d => d.type === selectedType).items.map((dev, index) =>\n                                    <DeviceRow\n                                        key={dev.name}\n                                        dev={dev}\n                                        isSelected={selection.includes(index)}\n                                        onClick={e => handleSelectionClick(index, e.shiftKey)}\n                                        onDisableLocation={e => changeLocations(selectedType, [index], [undefined])}\n                                    />\n                                )\n                            }\n                        </List >\n                    </div >\n                </div>\n            </Paper>\n            <Paper\n                style={{ position: 'absolute', height: '20%', width: '30%', right: 50, bottom: 50, justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}\n            >\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    // label=\"Json\"\n                    multiline\n                    // rows=\"10\"\n                    // variant={\"outlined\"}\n                    style={{\n                        position: 'absolute', overflow: 'scroll',\n                        top: 10, bottom: 10, right: 10, left: 10\n                        // , justifyContent: 'center'\n\n                    }}\n                    inputProps={{ style: { fontSize: 10, lineHeight: 1 } }}\n                    value={JSON.stringify(devices, null, 2)}\n                    onChange={e => setDevices(JSON.parse(e.target.value))}\n                />\n            </Paper>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}