{"version":3,"sources":["DataContents.js","DeviceMarker.jsx","DeviceRow.jsx","JsonStreamer.jsx","ShapeChooser.jsx","TypeChooser.jsx","Utils.js","App.jsx","serviceWorker.js","index.js"],"names":["theDevices","DeviceMarker","device","isSelected","isTypeSelected","Marker","key","name","position","title","icon","divIcon","iconSize","html","renderToStaticMarkup","className","style","color","Popup","DeviceRow","dev","onClick","onDisableLocation","ListItem","button","selected","ListItemText","primary","IconButton","aria-label","size","JsonStreamer","json","onChange","Paper","maxHeight","overflow","height","width","right","bottom","justifyContent","alignItems","zIndex","TextField","id","multiline","top","left","inputProps","fontSize","lineHeight","value","JSON","stringify","e","parse","target","ShapeChooser","shape","shapeOptions","ToggleButtonGroup","margin","exclusive","newShape","map","opt","ToggleButton","disabled","TypeChooser","selectedType","showAll","setShowAll","typeOptions","display","verticalAlign","InputLabel","Switch","checked","Select","MenuItem","lerp","from","to","t","lerpYX","t0","t1","lerpPoint","distance","p","q","dx","dy","Math","sqrt","findPositionOnPolyline","points","pos","curr","i","length","dist","after","fraction","resamplePolyline","num","total","polylineLength","resampled","Array","catmullRom","p0","p1","p2","p3","v0","v1","t2","splineCurveOne","intPoint","floor","weight","splineCurve","amount","ret","arcCurveFromPoints","v2","a1","atan2","a2","center","radius","fromAngle","toAngle","PI","a","cos","sin","arcCurve","console","log","Date","lastIndex","markedPoints","Boolean","window","location","hostname","match","ReactDOM","render","mapElement","useRef","currPolyline","React","useState","selection","setSelection","type","setSelectedType","devices","setDevices","setShape","undefined","startPoint","setStartPoint","changeLocations","indices","newLocations","tempDevices","slice","typeDevices","find","d","items","min","toLine","toPositions","concat","rows","cols","ceil","y","x","push","shapeData","s","renderShape","hoverPoint","current","leafletElement","setLatLngs","zoom","ref","latlng","lat","lng","onMouseMove","onMouseOut","TileLayer","attribution","url","devType","index","includes","Polyline","positions","val","Button","variant","newType","List","doRange","sel","low","high","max","filter","sort","handleSelectionClick","shiftKey","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAAaA,EAAa,CACtB,CACI,KAAQ,OACR,MAAS,CACL,CAAE,KAAQ,WAAY,SAAY,CAAC,MAAO,QAC1C,CAAE,KAAQ,YACV,CAAE,KAAQ,WAAY,SAAY,CAAC,MAAO,QAC1C,CAAE,KAAQ,YACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,aACV,CAAE,KAAQ,eAElB,CACI,KAAQ,QACR,MAAS,CACL,CAAE,KAAQ,YACV,CAAE,KAAQ,WAAY,SAAY,CAAC,mBAAoB,oBACvD,CAAE,KAAQ,YACV,CAAE,KAAQ,WAAY,SAAY,CAAC,iBAAkB,wB,kCCxBpDC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAYC,EAAvB,EAAuBA,eAAvB,OACxB,kBAACC,EAAA,EAAD,CAAQC,IAAKJ,EAAOK,KAChBC,SAAUN,EAAOM,SACjBC,MAAOP,EAAOK,KACdG,KAAMC,kBAAQ,CACVC,SAAU,CAAC,GAAI,IACfC,KAAMC,+BACF,uBAAGC,UAAU,8BACTC,MAAO,CAAEC,MAAQb,EAAkBD,EAAa,UAAY,UAAa,iBAKrF,kBAACe,EAAA,EAAD,KACKhB,EAAOK,KAAO,QAAUL,EAAOM,SAAW,O,2CCf1CW,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKjB,EAAR,EAAQA,WAAYkB,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,kBAA7B,OACrB,kBAACC,EAAA,EAAD,CACIjB,IAAKc,EAAIb,KACTiB,QAAM,EACNC,SAAUtB,EACVkB,QAASA,GAET,kBAACK,EAAA,EAAD,CAAcC,QAASP,EAAIb,OACzBa,EAAIZ,SACF,kBAACoB,EAAA,EAAD,CAAYC,aAAW,mBAAmBC,KAAK,QAC3CT,QAASC,GAET,kBAAC,IAAD,OAJS,O,SCTZS,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OACxB,kBAACC,EAAA,EAAD,CACIlB,MAAO,CACHR,SAAU,WAAY2B,UAAW,MAAOC,SAAU,OAClDC,OAAQ,MAAOC,MAAO,MAAOC,MAAO,GAAIC,OAAQ,GAChDC,eAAgB,SAAUC,WAAY,SAAUC,OAAQ,MAG5D,kBAACC,EAAA,EAAD,CACIC,GAAG,4BAEHC,WAAS,EAGT9B,MAAO,CACHR,SAAU,WAAY4B,SAAU,SAChCW,IAAK,GAAIP,OAAQ,GAAID,MAAO,GAAIS,KAAM,IAI1CC,WAAY,CAAEjC,MAAO,CAAEkC,SAAU,GAAIC,WAAY,IACjDC,MAAOC,KAAKC,UAAUtB,EAAM,KAAM,GAClCC,SAAU,SAAAsB,GAAC,OAAItB,EAASoB,KAAKG,MAAMD,EAAEE,OAAOL,a,kBCtB3CM,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAO1B,EAAV,EAAUA,SAAU2B,EAApB,EAAoBA,aAApB,OACxB,kBAACC,EAAA,EAAD,CACI7C,MAAO,CAAE8C,OAAQ,GACjBhC,KAAK,QACLsB,MAAOO,EACPI,WAAS,EACT9B,SAAU,SAACsB,EAAGS,GAAJ,OAAiB/B,EAAS+B,KAEnCJ,EAAaK,KAAI,SAAAC,GAAG,OACjB,kBAACC,EAAA,EAAD,CAAcf,MAAOc,EAAI3D,KAAMD,IAAK4D,EAAI3D,KAAM6D,SAAUF,EAAIE,UACvDF,EAAI3D,W,oCCVR8D,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcrC,EAAjB,EAAiBA,SAAUsC,EAA3B,EAA2BA,QAASC,EAApC,EAAoCA,WAAYC,EAAhD,EAAgDA,YAAhD,OACvB,yBAAKzD,MAAO,CAAEsB,MAAO,SACjB,yBAAKtB,MAAO,CAAE0D,QAAS,eAAgBC,cAAe,WAAYb,OAAQ,IACtE,kBAACc,EAAA,EAAD,CAAY/B,GAAG,iBAAiB7B,MAAO,CAAEkC,SAAU,KAAnD,YACA,kBAAC2B,EAAA,EAAD,CAAQhC,GAAG,iBAAiB5B,MAAM,UAAUgC,WAAY,CAAE,aAAc,oBACpEG,MAAOmB,EACPtC,SAAU,SAAAsB,GAAC,OAAIiB,EAAWjB,EAAEE,OAAOqB,aAG3C,yBAAK9D,MAAO,CAAE0D,QAAS,eAAgBC,cAAe,WAAYb,OAAQ,IACtE,kBAACc,EAAA,EAAD,CAAY/B,GAAG,cAAc7B,MAAO,CAAEkC,SAAU,KAAhD,eACA,kBAAC6B,EAAA,EAAD,CACIlC,GAAG,cACHO,MAAOkB,EACPrC,SAAU,SAAAsB,GAAC,OAAItB,EAASsB,EAAEE,OAAOL,SAG7BqB,EAAYR,KAAI,SAAAC,GAAG,OACf,kBAACc,EAAA,EAAD,CAAU1E,IAAK4D,EAAI3D,KAAM6C,MAAOc,EAAI3D,MAC/B2D,EAAI3D,aCtBpB0E,EAAO,SAACC,EAAMC,EAAIC,GAC3B,OAAOF,GAAQ,EAAIE,GAAKD,EAAKC,GAGpBC,EAAS,SAACH,EAAMC,EAAIG,EAAIC,GACjC,MAAO,CAACN,EAAKC,EAAK,GAAIC,EAAG,GAAIG,GAAKL,EAAKC,EAAK,GAAIC,EAAG,GAAII,KAG9CC,EAAY,SAACN,EAAMC,EAAIC,GAChC,MAAO,CAACC,EAAOH,EAAK,GAAIC,EAAG,GAAIC,EAAGA,GAAIH,EAAKC,EAAK,GAAIC,EAAG,GAAIC,KAalDK,EAAW,SAACC,EAAGC,GACxB,IAAMC,EAAKF,EAAE,GAAKC,EAAE,GACdE,EAAKH,EAAE,GAAKC,EAAE,GACpB,OAAOG,KAAKC,KAAKH,EAAKA,EAAKC,EAAKA,IAWvBG,EAAyB,SAACC,EAAQC,GAE3C,IADA,IAAIC,EAAO,EACFC,EAAI,EAAGA,EAAIH,EAAOI,OAAS,IAAKD,EAAG,CACxC,IAAME,EAAOb,EAASQ,EAAOG,GAAIH,EAAOG,EAAI,IACtCG,EAAQJ,EAAOG,EACrB,KAAIC,GAASL,GAEN,CACH,IAAMM,GAAYN,EAAMC,GAAQG,EAChC,OAAOd,EAAUS,EAAOG,GAAIH,EAAOG,EAAI,GAAII,GAH3CL,EAAOI,EAMf,OAAON,EAAOA,EAAOI,OAAS,IAGrBI,EAAmB,SAACR,EAAQS,GAGrC,IAFA,IAAMC,EAxBoB,SAACV,GAE3B,IADA,IAAIU,EAAQ,EACHP,EAAI,EAAGA,EAAIH,EAAOI,OAAS,IAAKD,EACrCO,GAASlB,EAASQ,EAAOG,GAAIH,EAAOG,EAAI,IAE5C,OAAOO,EAmBOC,CAAeX,GACzBY,EAAY,IAAIC,MAAMJ,GACjBN,EAAI,EAAGA,EAAIM,IAAON,EACvBS,EAAUT,GAAKJ,EAAuBC,EAAQG,GAAKM,EAAM,GAAKC,GAElE,OAAOE,GAGEE,EAAa,SAAC3B,EAAG4B,EAAIC,EAAIC,EAAIC,GACtC,IAAIC,EAAiB,IAAXF,EAAKF,GACXK,EAAiB,IAAXF,EAAKF,GACXK,EAAKlC,EAAIA,EAEb,OAAQ,EAAI6B,EAAK,EAAIC,EAAKE,EAAKC,IADtBjC,EAAIkC,KACgC,EAAIL,EAAK,EAAIC,EAAK,EAAIE,EAAKC,GAAMC,EAAKF,EAAKhC,EAAI6B,GAGnFM,EAAiB,SAACtB,EAAQb,GACnC,IAAIM,GAAKO,EAAOI,OAAS,GAAKjB,EAE1BoC,EAAW1B,KAAK2B,MAAM/B,GACtBgC,EAAShC,EAAI8B,EAEbR,EAAKf,EAAoB,IAAbuB,EAAiBA,EAAWA,EAAW,GACnDP,EAAKhB,EAAOuB,GACZN,EAAKjB,EAAOuB,EAAWvB,EAAOI,OAAS,EAAIJ,EAAOI,OAAS,EAAImB,EAAW,GAC1EL,EAAKlB,EAAOuB,EAAWvB,EAAOI,OAAS,EAAIJ,EAAOI,OAAS,EAAImB,EAAW,GAE9E,MAAO,CACHT,EAAWW,EAAQV,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,IAC3CJ,EAAWW,EAAQV,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,MAItCQ,EAAc,SAAC1B,EAAQ2B,GAEhC,IADA,IAAIC,EAAM,IAAIf,MAAMc,GACXxB,EAAI,EAAGA,EAAIwB,IAAUxB,EAC1ByB,EAAIzB,GAAKmB,EAAetB,EAAQG,EAAIwB,GAExC,OAAOC,GAgBEC,EAAqB,SAAC7B,EAAQ2B,GACvC,IAAMlC,EAAIO,EAAO,GAAIoB,EAAKpB,EAAO,GAAI8B,EAAK9B,EAAOA,EAAOI,OAAS,GAC3D2B,EAAKlC,KAAKmC,MAAMZ,EAAG,GAAK3B,EAAE,GAAI2B,EAAG,GAAK3B,EAAE,IACxCwC,EAAKpC,KAAKmC,MAAMF,EAAG,GAAKrC,EAAE,GAAIqC,EAAG,GAAKrC,EAAE,IAE9C,OAlBoB,SAACyC,EAAQC,EAAQC,EAAWC,EAASV,GAErDU,EAAUD,IAAWC,GAAqB,EAAVxC,KAAKyC,IAEzC,IADA,IAAIV,EAAM,IAAIf,MAAMc,GACXxB,EAAI,EAAGA,EAAIwB,IAAUxB,EAAG,CAC7B,IAAMhB,EAAIgB,GAAKwB,EAAS,GAClBY,EAAIH,GAAa,EAAIjD,GAAKkD,EAAUlD,EAC1CyC,EAAIzB,GAAK,CAAC+B,EAAO,GAAKC,EAAStC,KAAK2C,IAAID,GAAIL,EAAO,GAAKC,EAAStC,KAAK4C,IAAIF,IAG9E,OAAOX,EAOOc,CAASjD,EAAGD,EAASC,EAAG2B,GAAKW,EAAIE,EAAIN,ICnGvDgB,QAAQC,IAAI,IAAIC,MAEhB,IAEIC,EACAC,EAHExI,EAAW,CAAC,UAAW,WCDTyI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFYG,WACf,IAAMC,EAAaC,iBAAO,MACpBC,EAAeD,iBAAO,MAFP,EAIaE,IAAMC,SAAS,IAJ5B,mBAIdC,EAJc,KAIHC,EAJG,OAKmBH,IAAMC,SAAS5J,EAAW,GAAG+J,MALhD,mBAKdzF,EALc,KAKA0F,EALA,OAMSL,IAAMC,SAAS5J,GANxB,mBAMdiK,EANc,KAMLC,EANK,OAOSP,IAAMC,UAAS,GAPxB,mBAOdrF,EAPc,KAOLC,EAPK,OAQKmF,IAAMC,SAAS,SARpB,mBAQdjG,EARc,KAQPwG,EARO,OASeR,IAAMC,cAASQ,GAT9B,mBASdC,EATc,KASFC,EATE,KAWfC,EAAkB,SAACR,EAAMS,EAASC,GAGpC,IAFA,IAAIC,EAAcT,EAAQU,QACtBC,EAAcF,EAAYG,MAAK,SAAAC,GAAC,OAAIA,EAAEf,OAASA,KAAMgB,MAChD3E,EAAI,EAAGA,EAAIoE,EAAQnE,SAAUD,EAClCwE,EAAYJ,EAAQpE,IAAI5F,SAAWiK,EAAa3E,KAAKkF,IAAI5E,EAAGqE,EAAapE,OAAS,IAEtF,OAAOqE,GAsCL9G,EAAe,CACjB,CACIrD,KAAM,QACN0K,OAAQ,SAAAhF,GAAM,MAAI,IAClBiF,YAAa,SAAAjF,GAAM,MAAI,CAACA,EAAO,MAEnC,CACI1F,KAAM,OACN0K,OAAQ,SAAAhF,GAAM,OAAIA,GAClBiF,YAAa,SAAAjF,GAAM,OAAIQ,EAAiBR,EAAQ4D,EAAUxD,UAE9D,CACI9F,KAAM,QACN0K,OAAQ,SAAAhF,GAAM,OAAI0B,EAAY1B,EAAQ,MACtCiF,YAAa,SAAAjF,GAAM,OAAIQ,EAAiBkB,EAAY1B,EAAQ,KAAM4D,EAAUxD,UAEhF,CACI9F,KAAM,MACN0K,OAAQ,SAAAhF,GACJ,OAAsB,IAAlBA,EAAOI,OAAqBJ,EACzB,CAACA,EAAO,IAAIkF,OAAOrD,EAAmB7B,EAAQ,OAEzDiF,YAAa,SAAAjF,GAAM,OAAIQ,EAAiBqB,EAAmB7B,EAAQ,KAAM4D,EAAUxD,UAEvF,CACI9F,KAAM,OACN0K,OAAQ,SAAAhF,GAAM,MAAI,CACd,CAACA,EAAO,GAAG,GAAIA,EAAO,GAAG,IACzB,CAACA,EAAO,GAAG,GAAIA,EAAO,GAAG,IACzB,CAACA,EAAO,GAAG,GAAIA,EAAO,GAAG,IACzB,CAACA,EAAO,GAAG,GAAIA,EAAO,GAAG,IACzB,CAACA,EAAO,GAAG,GAAIA,EAAO,GAAG,MAE7BiF,YAAa,SAACjF,GAGV,IAHgC,IAAdmF,EAAa,uDAAN,EACrBvD,EAAM,GACJwD,EAAOvF,KAAKwF,KAAKzB,EAAUxD,OAAS+E,GACjCG,EAAI,EAAGA,EAAIH,IAAQG,EACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,IAAQG,EACxB3D,EAAI4D,KAAKpG,EAAOY,EAAO,GAAIA,EAAO,GAAIsF,GAAKH,EAAO,GAAII,GAAKH,EAAQ,KAG3E,OAAOxD,KAab6D,EAAY,kBAAM9H,EAAaiH,MAAK,SAAAc,GAAC,OAAIA,EAAEpL,OAASoD,MAEpDiI,EAAc,SAACC,GACjB,GAAIxB,EAAY,CACZ,IAAIpE,EAAS,CAACoE,GAAYc,OAAOnC,GAC7B6C,GACA5F,EAAOwF,KAAKI,GAEhBnC,EAAaoC,QAAQC,eAAeC,WAAWN,IAAYT,OAAOhF,MAY1E,OACI,yBAAKlF,UAAU,OACX,kBAAC,IAAD,CAAYoH,OAAQ3H,EAAUyL,KAAM,GAChCC,IAAK1C,EACLxI,MAAO,CAAEsB,MAAO,OAAQD,OAAQ,SAChChB,QA9FW,SAAAkC,GAEL,UAAVI,GACA4G,EAAgBjG,EAAcuF,EAAW,CAAC,CAACtG,EAAE4I,OAAOC,IAAK7I,EAAE4I,OAAOE,OAClEvC,EAAa,KAERO,EAIDrB,EAAayC,KAAK,CAAClI,EAAE4I,OAAOC,IAAK7I,EAAE4I,OAAOE,OAH1C/B,EAAc,CAAC/G,EAAE4I,OAAOC,IAAK7I,EAAE4I,OAAOE,MACtCrD,EAAe,KAuFfsD,YAdY,SAAA/I,GACpBqI,EAAY,CAACrI,EAAE4I,OAAOC,IAAK7I,EAAE4I,OAAOE,OAc5BE,WAXW,WACnBX,MAYQ,kBAACY,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAGJzC,EAAQhG,KAAI,SAAA0I,GACR,OAAIpI,GAAYoI,EAAQ5C,OAASzF,EACtBqI,EAAQ5B,MAAM9G,KAAI,SAAC7C,EAAKwL,GAC3B,OAAIxL,EAAIZ,SACG,kBAAC,EAAD,CAAcF,IAAKc,EAAIb,KAAML,OAAQkB,EACxCjB,WAAY0J,EAAUgD,SAASD,GAC/BxM,eAAgBuM,EAAQ5C,OAASzF,IAG9B,QAIR,QAMd+F,EACG,kBAACyC,EAAA,EAAD,CAAUC,UAAW,CAAC1C,EAAYA,GAAa6B,IAAKxC,IAD1C,MAKtB,kBAACxH,EAAA,EAAD,CACIlB,MAAO,CACHR,SAAU,WAAY6B,OAAQ,MAAOF,UAAW,MAAOC,SAAU,OACjEW,IAAK,GAAIT,MAAO,MAAOC,MAAO,GAAIC,OAAQ,GAC1CC,eAAgB,SAAUC,WAAY,SAAUC,OAAQ,MAG5D,yBACI3B,MAAO,CAAE8C,OAAQ,KAEjB,kBAAC,EAAD,CACIH,MAAOA,EACP1B,SAAU,SAAC+K,GAAD,OAAS7C,EAAS6C,IAC5BpJ,aAAcA,IAElB,kBAACqJ,EAAA,EAAD,CAAQC,QAAQ,YAAYjM,MAAM,UAC9BmD,SAAoB,UAAVT,EACV3C,MAAO,CAAE8C,OAAQ,GACjBzC,QApFK,WACrB,IAAI0L,EAAY,CAAC1C,GAAYc,OAAOnC,GACpC+D,EAAYrB,IAAYR,YAAY6B,GACpC7C,EAAWK,EAAgBjG,EAAcuF,EAAWkD,IACpDzC,OAAcF,GACdN,EAAa,MA4ED,eAOA,kBAAC,EAAD,CACIxF,aAAcA,EACdrC,SAAU,SAAAkL,GACNrD,EAAa,IACbE,EAAgBmD,IAEpB5I,QAASA,EACTC,WAAY,SAAAwI,GAAG,OAAIxI,EAAWwI,IAC9BvI,YAAawF,EAAQhG,KAAI,SAAA7C,GAAS,MAAO,CAAEb,KAAMa,EAAI2I,WAGzD,yBAAK/I,MAAO,CAAEoB,SAAU,SAAUC,OAAQ,UAAWqC,QAAS,UAG1D,kBAAC0I,EAAA,EAAD,KAEQnD,EAAQY,MAAK,SAAAC,GAAC,OAAIA,EAAEf,OAASzF,KAAcyG,MAAM9G,KAAI,SAAC7C,EAAKwL,GAAN,OACjD,kBAAC,EAAD,CACItM,IAAKc,EAAIb,KACTa,IAAKA,EACLjB,WAAY0J,EAAUgD,SAASD,GAC/BvL,QAAS,SAAAkC,GAAC,OA9LjB,SAACqJ,EAAOS,GACjC,IAAIC,EAAM,GACV,GAAKD,GAME,QAAkBjD,IAAdrB,EAAyB,CAChC,IAAMwE,EAAMzH,KAAKkF,IAAI4B,EAAO7D,GAAYyE,EAAO1H,KAAK2H,IAAIb,EAAO7D,GAC/DuE,EAAMzD,EAAU6D,QAAO,SAAA/B,GAAC,OAAIA,EAAI4B,KAChC,IAAK,IAAInH,EAAImH,EAAKnH,GAAKoH,IAAQpH,EAC3BkH,EAAI7B,KAAKrF,GAEbkH,EAAInC,OAAOtB,EAAU6D,QAAO,SAAA/B,GAAC,OAAIA,EAAI6B,YAVjCF,EADAzD,EAAUgD,SAASD,GACb/C,EAAU6D,QAAO,SAAA/B,GAAC,OAAIA,IAAMiB,KAE5B/C,EAAUsB,OAAO,CAACyB,IAUhC9C,EAAawD,EAAIK,QACjB5E,EAAY6D,EA6KkCgB,CAAqBhB,EAAOrJ,EAAEsK,WAC5CvM,kBAAmB,SAAAiC,GAAC,OAAIgH,EAAgBjG,EAAc,CAACsI,GAAQ,MAACxC,cAQ5F,kBAAC,EAAD,CACIpI,KAAMiI,EACNhI,SAAU,SAAC+K,GAAD,OAAS9C,EAAW8C,SEzO9B,MAASc,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e8400f05.chunk.js","sourcesContent":["export const theDevices = [\n    {\n        \"type\": \"wind\",\n        \"items\": [\n            { \"name\": \"Device 1\", \"position\": [32.08, 34.77] },\n            { \"name\": \"Device 2\" },\n            { \"name\": \"Device 3\", \"position\": [32.07, 34.78] },\n            { \"name\": \"Device 4\" },\n            { \"name\": \"Device 41\" },\n            { \"name\": \"Device 42\" },\n            { \"name\": \"Device 43\" },\n            { \"name\": \"Device 44\" },\n            { \"name\": \"Device 45\" },\n            { \"name\": \"Device 46\" },\n            { \"name\": \"Device 47\" },\n            { \"name\": \"Device 51\" },\n            { \"name\": \"Device 52\" },\n            { \"name\": \"Device 53\" },\n            { \"name\": \"Device 54\" },\n            { \"name\": \"Device 55\" },\n            { \"name\": \"Device 56\" },\n            { \"name\": \"Device 57\" }]\n    },\n    {\n        \"type\": \"water\",\n        \"items\": [\n            { \"name\": \"Device 5\" },\n            { \"name\": \"Device 6\", \"position\": [32.080320121040344, 34.78262901306153] },\n            { \"name\": \"Device 7\" },\n            { \"name\": \"Device 8\", \"position\": [32.0678106134499, 34.768552780151374] }\n        ]\n    }\n];\n","import React from 'react';\nimport { Marker, Popup } from \"react-leaflet\";\nimport { divIcon } from 'leaflet';\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nexport const DeviceMarker = ({ device, isSelected, isTypeSelected }) => (\n    <Marker key={device.name}\n        position={device.position}\n        title={device.name}\n        icon={divIcon({\n            iconSize: [20, 20],\n            html: renderToStaticMarkup(\n                <i className=\" fa fa-map-marker-alt fa-2x\"\n                    style={{ color: (isTypeSelected ? (isSelected ? '#297A31' : '#1B2C6F') : '#888888') }}\n                />\n            )\n        })}\n    >\n        <Popup>\n            {device.name + ' at (' + device.position + ')'}\n        </Popup>\n    </Marker >\n)\n","import { IconButton, ListItem, ListItemText } from '@material-ui/core';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport React from 'react';\n\nexport const DeviceRow = ({ dev, isSelected, onClick, onDisableLocation }) => (\n    <ListItem\n        key={dev.name}\n        button\n        selected={isSelected}\n        onClick={onClick}\n    >\n        <ListItemText primary={dev.name} />\n        {!dev.position ? null :\n            <IconButton aria-label=\"Disable location\" size=\"small\"\n                onClick={onDisableLocation}\n            >\n                <LocationOnIcon />\n            </IconButton>\n        }\n    </ListItem>\n)\n","import React from 'react';\nimport { Paper, TextField } from '@material-ui/core';\n\nexport const JsonStreamer = ({ json, onChange }) => (\n    <Paper\n        style={{\n            position: 'absolute', maxHeight: '10%', overflow: 'auto',\n            height: '10%', width: '30%', right: 50, bottom: 50,\n            justifyContent: 'center', alignItems: 'center', zIndex: 1000\n        }}\n    >\n        <TextField\n            id=\"outlined-multiline-static\"\n            // label=\"Json\"\n            multiline\n            // rows=\"10\"\n            // variant={\"outlined\"}\n            style={{\n                position: 'absolute', overflow: 'scroll',\n                top: 10, bottom: 10, right: 10, left: 10\n                // , justifyContent: 'center'\n\n            }}\n            inputProps={{ style: { fontSize: 10, lineHeight: 1 } }}\n            value={JSON.stringify(json, null, 2)}\n            onChange={e => onChange(JSON.parse(e.target.value))}\n        />\n    </Paper>\n)","import { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport React from 'react';\n\nexport const ShapeChooser = ({ shape, onChange, shapeOptions }) => (\n    <ToggleButtonGroup\n        style={{ margin: 5 }}\n        size=\"small\"\n        value={shape}\n        exclusive\n        onChange={(e, newShape) => onChange(newShape)}\n    >\n        {shapeOptions.map(opt =>\n            <ToggleButton value={opt.name} key={opt.name} disabled={opt.disabled}>\n                {opt.name}\n            </ToggleButton>\n        )}\n    </ToggleButtonGroup>\n)","import { InputLabel, MenuItem, Select, Switch } from '@material-ui/core';\nimport React from 'react';\n\nexport const TypeChooser = ({ selectedType, onChange, showAll, setShowAll, typeOptions }) => (\n    <div style={{ width: '100%' }}>\n        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n            <InputLabel id=\"show-all-types\" style={{ fontSize: 10 }}>Show all</InputLabel>\n            <Switch id=\"show-all-types\" color=\"primary\" inputProps={{ 'aria-label': 'primary checkbox' }}\n                value={showAll}\n                onChange={e => setShowAll(e.target.checked)}\n            />\n        </div>\n        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n            <InputLabel id=\"select-type\" style={{ fontSize: 10 }}>Device Type</InputLabel>\n            <Select\n                id=\"select-type\"\n                value={selectedType}\n                onChange={e => onChange(e.target.value)}\n            >\n                {\n                    typeOptions.map(opt => (\n                        <MenuItem key={opt.name} value={opt.name}>\n                            {opt.name}\n                        </MenuItem>\n                    ))\n                }\n            </Select>\n        </div>\n    </div>\n)","export const lerp = (from, to, t) => {\n    return from * (1 - t) + to * t;\n};\n\nexport const lerpYX = (from, to, t0, t1) => {\n    return [lerp(from[0], to[0], t0), lerp(from[1], to[1], t1)];\n};\n\nexport const lerpPoint = (from, to, t) => {\n    return [lerpYX(from[0], to[0], t, t), lerp(from[1], to[1], t, t)];\n};\n\nexport const resampleLine = (from, to, num) => {\n    let ret = new Array(num);\n    ret[0] = from;\n    for (let i = 1; i < num - 1; ++i) {\n        ret[i] = lerpPoint(from, to, i / (num - 1));\n    }\n    ret[num - 1] = to;\n    return ret;\n}\n\nexport const distance = (p, q) => {\n    const dx = p[0] - q[0];\n    const dy = p[1] - q[1];\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const polylineLength = (points) => {\n    let total = 0;\n    for (let i = 0; i < points.length - 1; ++i) {\n        total += distance(points[i], points[i + 1]);\n    }\n    return total;\n}\n\nexport const findPositionOnPolyline = (points, pos) => {\n    let curr = 0;\n    for (let i = 0; i < points.length - 1; ++i) {\n        const dist = distance(points[i], points[i + 1]);\n        const after = curr + dist;\n        if (after <= pos) {\n            curr = after;\n        } else {\n            const fraction = (pos - curr) / dist;\n            return lerpPoint(points[i], points[i + 1], fraction);\n        }\n    }\n    return points[points.length - 1];\n}\n\nexport const resamplePolyline = (points, num) => {\n    const total = polylineLength(points);\n    let resampled = new Array(num);\n    for (let i = 0; i < num; ++i) {\n        resampled[i] = findPositionOnPolyline(points, i / (num - 1) * total);\n    }\n    return resampled;\n}\n\nexport const catmullRom = (t, p0, p1, p2, p3) => {\n    var v0 = (p2 - p0) * 0.5;\n    var v1 = (p3 - p1) * 0.5;\n    var t2 = t * t;\n    var t3 = t * t2;\n    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (- 3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n}\n\nexport const splineCurveOne = (points, t) => {\n    var p = (points.length - 1) * t;\n\n    var intPoint = Math.floor(p);\n    var weight = p - intPoint;\n\n    var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n    var p1 = points[intPoint];\n    var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\n    return [\n        catmullRom(weight, p0[0], p1[0], p2[0], p3[0]),\n        catmullRom(weight, p0[1], p1[1], p2[1], p3[1])\n    ];\n};\n\nexport const splineCurve = (points, amount) => {\n    let ret = new Array(amount);\n    for (let i = 0; i < amount; ++i) {\n        ret[i] = splineCurveOne(points, i / amount);\n    }\n    return ret;\n}\n\nexport const arcCurve = (center, radius, fromAngle, toAngle, amount) => {\n    // console.log(center, radius, fromAngle, toAngle);\n    if (toAngle > fromAngle) toAngle -= Math.PI * 2;\n    let ret = new Array(amount);\n    for (let i = 0; i < amount; ++i) {\n        const t = i / (amount - 1);\n        const a = fromAngle * (1 - t) + toAngle * t;\n        ret[i] = [center[0] + radius * Math.cos(a), center[1] + radius * Math.sin(a)];\n    }\n    // console.log(ret);\n    return ret;\n}\n\nexport const arcCurveFromPoints = (points, amount) => {\n    const p = points[0], v1 = points[1], v2 = points[points.length - 1];\n    const a1 = Math.atan2(v1[1] - p[1], v1[0] - p[0]);\n    const a2 = Math.atan2(v2[1] - p[1], v2[0] - p[0]);\n    const curve = arcCurve(p, distance(p, v1), a1, a2, amount);\n    return curve;\n}\n\nexport const partition = (arr, num) => {\n    let results = [];\n    let leg = Math.ceil(arr.length / num);\n    while (arr.length) {\n        results.push(arr.splice(0, leg));\n    }\n    return results;\n}","import { Button, List, Paper } from '@material-ui/core';\nimport React, { useRef } from 'react';\nimport { Map as LeafletMap, Polyline, TileLayer } from \"react-leaflet\";\nimport { theDevices } from './DataContents';\nimport { DeviceMarker } from './DeviceMarker';\nimport { DeviceRow } from './DeviceRow';\nimport { JsonStreamer } from './JsonStreamer';\nimport { ShapeChooser } from './ShapeChooser';\nimport { TypeChooser } from './TypeChooser';\nimport { arcCurveFromPoints, resamplePolyline, splineCurve, partition, lerpYX } from './Utils';\n\nconsole.log(new Date());\n\nconst position = [32.081128, 34.779729];\n\nlet lastIndex;\nlet markedPoints;\n\nexport const App = () => {\n    const mapElement = useRef(null);\n    const currPolyline = useRef(null);\n\n    const [selection, setSelection] = React.useState([]);\n    const [selectedType, setSelectedType] = React.useState(theDevices[0].type);\n    const [devices, setDevices] = React.useState(theDevices);\n    const [showAll, setShowAll] = React.useState(false);\n    const [shape, setShape] = React.useState(\"Point\");\n    const [startPoint, setStartPoint] = React.useState(undefined);\n\n    const changeLocations = (type, indices, newLocations) => {\n        let tempDevices = devices.slice();\n        let typeDevices = tempDevices.find(d => d.type === type).items;\n        for (let i = 0; i < indices.length; ++i) {\n            typeDevices[indices[i]].position = newLocations[Math.min(i, newLocations.length - 1)];\n        }\n        return tempDevices;\n    };\n\n    const handleSelectionClick = (index, doRange) => {\n        let sel = [];\n        if (!doRange) {\n            if (selection.includes(index)) {\n                sel = selection.filter(s => s !== index);\n            } else {\n                sel = selection.concat([index]);\n            }\n        } else if (lastIndex !== undefined) {\n            const low = Math.min(index, lastIndex), high = Math.max(index, lastIndex);\n            sel = selection.filter(s => s < low);\n            for (let i = low; i <= high; ++i) {\n                sel.push(i);\n            }\n            sel.concat(selection.filter(s => s > high));\n        }\n        setSelection(sel.sort());\n        lastIndex = index;\n    }\n\n    const handleMapClick = e => {\n        // if (selection.length < 1) return;\n        if (shape === 'Point') {\n            changeLocations(selectedType, selection, [[e.latlng.lat, e.latlng.lng]]);\n            setSelection([]);\n        } else {\n            if (!startPoint) {\n                setStartPoint([e.latlng.lat, e.latlng.lng]);\n                markedPoints = [];\n            } else {\n                markedPoints.push([e.latlng.lat, e.latlng.lng]);\n            }\n        }\n    };\n\n    const shapeOptions = [\n        {\n            name: 'Point',\n            toLine: points => [],\n            toPositions: points => [points[0]]\n        },\n        {\n            name: 'Poly',\n            toLine: points => points,\n            toPositions: points => resamplePolyline(points, selection.length)\n        },\n        {\n            name: 'Curve',\n            toLine: points => splineCurve(points, 100),\n            toPositions: points => resamplePolyline(splineCurve(points, 100), selection.length)\n        },\n        {\n            name: 'Arc',\n            toLine: points => {\n                if (points.length === 2) return points;\n                return [points[0]].concat(arcCurveFromPoints(points, 400));\n            },\n            toPositions: points => resamplePolyline(arcCurveFromPoints(points, 400), selection.length)\n        },\n        {\n            name: 'Rect',\n            toLine: points => [\n                [points[0][0], points[0][1]],\n                [points[1][0], points[0][1]],\n                [points[1][0], points[1][1]],\n                [points[0][0], points[1][1]],\n                [points[0][0], points[0][1]]\n            ],\n            toPositions: (points, rows = 3) => {\n                let ret = [];\n                const cols = Math.ceil(selection.length / rows);\n                for (let y = 0; y < rows; ++y) {\n                    for (let x = 0; x < cols; ++x) {\n                        ret.push(lerpYX(points[0], points[1], y / (rows - 1), x / (cols  - 1)));\n                    }\n                }\n                return ret;\n            }\n        }\n    ];\n\n    const handlePutDevices = () => {\n        let positions = [startPoint].concat(markedPoints);\n        positions = shapeData().toPositions(positions);\n        setDevices(changeLocations(selectedType, selection, positions));\n        setStartPoint(undefined);\n        setSelection([]);\n    };\n\n    const shapeData = () => shapeOptions.find(s => s.name === shape);\n\n    const renderShape = (hoverPoint) => {\n        if (startPoint) {\n            let points = [startPoint].concat(markedPoints);\n            if (hoverPoint) {\n                points.push(hoverPoint);\n            }\n            currPolyline.current.leafletElement.setLatLngs(shapeData().toLine(points));\n        }\n    };\n\n    const handleMouseMove = e => {\n        renderShape([e.latlng.lat, e.latlng.lng]);\n    };\n\n    const handleMouseOut = () => {\n        renderShape();\n    };\n\n    return (\n        <div className=\"App\">\n            <LeafletMap center={position} zoom={14}\n                ref={mapElement}\n                style={{ width: '100%', height: '100vh' }}\n                onClick={handleMapClick}\n                onMouseMove={handleMouseMove}\n                onMouseOut={handleMouseOut}\n            >\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {\n                    devices.map(devType => {\n                        if (showAll || (devType.type === selectedType)) {\n                            return devType.items.map((dev, index) => {\n                                if (dev.position) {\n                                    return <DeviceMarker key={dev.name} device={dev}\n                                        isSelected={selection.includes(index)}\n                                        isTypeSelected={devType.type === selectedType}\n                                    />\n                                } else {\n                                    return null;\n                                }\n                            });\n                        } else {\n                            return null;\n                        }\n                    })\n                }\n\n                {\n                    !startPoint ? null :\n                        <Polyline positions={[startPoint, startPoint]} ref={currPolyline} />\n                }\n\n            </LeafletMap>\n            <Paper\n                style={{\n                    position: 'absolute', height: '80%', maxHeight: '75%', overflow: 'auto',\n                    top: 50, width: '30%', right: 50, bottom: 50,\n                    justifyContent: 'center', alignItems: 'center', zIndex: 1000\n                }}\n            >\n                <div\n                    style={{ margin: 10 }}\n                >\n                    <ShapeChooser\n                        shape={shape}\n                        onChange={(val) => setShape(val)}\n                        shapeOptions={shapeOptions}\n                    />\n                    <Button variant=\"contained\" color=\"primary\"\n                        disabled={shape === 'Point'}\n                        style={{ margin: 5 }}\n                        onClick={handlePutDevices}\n                    >\n                        Put devices\n                    </Button>\n                    <TypeChooser\n                        selectedType={selectedType}\n                        onChange={newType => {\n                            setSelection([]);\n                            setSelectedType(newType);\n                        }}\n                        showAll={showAll}\n                        setShowAll={val => setShowAll(val)}\n                        typeOptions={devices.map(dev => { return { name: dev.type } })}\n                    />\n\n                    <div style={{ overflow: 'scroll', height: 'inherit', display: 'block' }}\n                    // inputProps={{ style: { overflow: 'scroll' } }}\n                    >\n                        <List>\n                            {\n                                devices.find(d => d.type === selectedType).items.map((dev, index) =>\n                                    <DeviceRow\n                                        key={dev.name}\n                                        dev={dev}\n                                        isSelected={selection.includes(index)}\n                                        onClick={e => handleSelectionClick(index, e.shiftKey)}\n                                        onDisableLocation={e => changeLocations(selectedType, [index], [undefined])}\n                                    />\n                                )\n                            }\n                        </List >\n                    </div >\n                </div>\n            </Paper>\n            <JsonStreamer\n                json={devices}\n                onChange={(val) => setDevices(val)}\n            />\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}