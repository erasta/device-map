{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["position","theDevices","type","items","name","DevicesOfType","devices","onSelectedChange","onDisableLocation","useStateWithCallback","selectedIndex","setSelectedIndex","List","map","dev","index","ListItem","key","button","selected","onClick","e","ListItemText","primary","IconButton","aria-label","size","DeviceMarker","device","isSelected","Marker","icon","divIcon","iconSize","html","renderToStaticMarkup","className","style","color","Popup","App","React","useState","selectedType","setSelectedType","setDevices","center","zoom","width","height","tempDevices","slice","find","d","latlng","lat","lng","TileLayer","attribution","url","Paper","top","right","bottom","justifyContent","alignItems","zIndex","margin","InputLabel","id","Select","labelId","value","onChange","target","MenuItem","undefined","TextField","label","multiline","rows","variant","left","inputProps","fontSize","lineHeight","JSON","stringify","parse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9abb8bc2.chunk.js","sourcesContent":["import { InputLabel, List, ListItem, ListItemText, MenuItem, Select, TextField, IconButton } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { divIcon } from 'leaflet';\nimport { Map as LeafletMap, Marker, Popup, TileLayer } from \"react-leaflet\";\n// import './App.css';\nimport useStateWithCallback from 'use-state-with-callback';\n\n\nconst position = [32.081128, 34.779729];\nconst theDevices = [\n    {\n        type: \"wind\", items: [\n            { name: \"Device 1\", position: [32.08, 34.77] },\n            { name: \"Device 2\" },\n            { name: \"Device 3\", position: [32.07, 34.78] },\n            { name: \"Device 4\" }]\n    },\n    {\n        type: \"water\", items: [\n            { name: \"Device 5\", position: [31.9, 34.77] },\n            { name: \"Device 6\" },\n            { name: \"Device 7\", position: [31.99, 34.78] },\n            { name: \"Device 8\" }]\n    }\n];\n\nconst DevicesOfType = ({ devices, onSelectedChange, onDisableLocation }) => {\n    const [selectedIndex, setSelectedIndex] = useStateWithCallback(0, selectedIndex => {\n        (onSelectedChange || (() => { }))(selectedIndex)\n    });\n    return (\n        <List>\n            {\n                devices.map((dev, index) =>\n                    <ListItem\n                        key={dev.name}\n                        button\n                        selected={selectedIndex === index}\n                        onClick={e => setSelectedIndex(index)}\n                    >\n                        <ListItemText primary={dev.name} />\n                        {!dev.position ? null :\n                            <IconButton aria-label=\"Disable location\" size=\"small\"\n                                onClick={e => onDisableLocation(index)}\n                            >\n                                <LocationOnIcon />\n                            </IconButton>\n                        }\n                    </ListItem>\n                )\n            }\n        </List >\n    )\n}\n\n// const iconMarkup = ;\n// const customMarkerIcon = ;\n\nconst DeviceMarker = ({ device, isSelected }) =>\n    (\n        <Marker position={device.position} key={device.name}\n            icon={divIcon({\n                iconSize: [20, 20],\n                html: renderToStaticMarkup(<i className=\" fa fa-map-marker-alt fa-2x\" style={{ color: isSelected ? '#297A31' : '#1B2C6F' }} />)\n            })}\n        >\n            <Popup>\n                <span>\n                    {device.name + '\\n' + device.position}\n                </span>\n            </Popup>\n        </Marker >\n    )\n\nconst App = () => {\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\n    const [selectedType, setSelectedType] = React.useState(theDevices[0].type);\n    const [devices, setDevices] = React.useState(theDevices);\n\n    return (\n        <div className=\"App\">\n            <LeafletMap center={position} zoom={14}\n                style={{ width: '100%', height: '100vh' }}\n                onClick={e => {\n                    let tempDevices = devices.slice();\n                    tempDevices.find(d => d.type === selectedType).items[selectedIndex].position = [e.latlng.lat, e.latlng.lng];\n                    setDevices(tempDevices);\n                }}\n            >\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {\n                    devices.find(d => d.type === selectedType).items.map((dev, index) =>\n                        (!dev.position ? null :\n                            <DeviceMarker key={dev.name} device={dev} isSelected={index === selectedIndex} />\n                        )\n                    )\n                }\n            </LeafletMap>\n            <Paper\n                style={{ position: 'absolute', top: 50, width: '30%', right: 50, bottom: 50, justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}\n            >\n                <div\n                    style={{ margin: 10 }}\n                >\n                    <InputLabel id=\"select-type\">Device Type</InputLabel>\n                    <Select\n                        labelId=\"select-type\"\n                        id=\"select-type\"\n                        value={selectedType}\n                        onChange={e => {\n                            setSelectedType(e.target.value);\n                        }}\n                    >\n                        {\n                            devices.map(dev => <MenuItem key={dev.type} value={dev.type}>{dev.type}</MenuItem>)\n                        }\n                    </Select>\n                    <DevicesOfType\n                        devices={devices.find(d => d.type === selectedType).items}\n                        onSelectedChange={(index) => setSelectedIndex(index)}\n                        onDisableLocation={(index) => {\n                            let tempDevices = devices.slice();\n                            tempDevices.find(d => d.type === selectedType).items[index].position = undefined;\n                            setDevices(tempDevices);\n                        }}\n                    />\n                </div>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Json\"\n                    multiline\n                    rows=\"10\"\n                    variant={\"outlined\"}\n                    style={{ position: 'absolute', bottom: 10, right: 10, left: 10, justifyContent: 'center' }}\n                    inputProps={{ style: { fontSize: 10, lineHeight: 1 } }}\n                    value={JSON.stringify(devices, null, 2)}\n                    onChange={e => setDevices(JSON.parse(e.target.value))}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}