{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["position","theDevices","DevicesOfType","devices","onSelectionChange","onDisableLocation","useStateWithCallback","selection","setSelection","List","map","dev","index","ListItem","key","name","button","selected","includes","onClick","e","filter","s","concat","sort","ListItemText","primary","IconButton","aria-label","size","DeviceMarker","device","isSelected","isTypeSelected","Marker","icon","divIcon","iconSize","html","renderToStaticMarkup","className","style","color","Popup","App","React","useState","type","selectedType","setSelectedType","setDevices","showAll","setShowAll","center","zoom","width","height","tempDevices","slice","tempDevicesOfType","find","d","items","forEach","latlng","lat","lng","TileLayer","attribution","url","devType","Paper","top","right","bottom","justifyContent","alignItems","zIndex","margin","display","verticalAlign","InputLabel","id","Switch","inputProps","value","onChange","target","checked","Select","MenuItem","undefined","TextField","label","multiline","rows","variant","left","fontSize","lineHeight","JSON","stringify","parse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kZAWMA,EAAW,CAAC,UAAW,WACvBC,EAAa,CACf,CACI,KAAQ,OACR,MAAS,CACL,CAAE,KAAQ,WAAY,SAAY,CAAC,MAAO,QAC1C,CAAE,KAAQ,YACV,CAAE,KAAQ,WAAY,SAAY,CAAC,MAAO,QAC1C,CAAE,KAAQ,cAElB,CACI,KAAQ,QACR,MAAS,CACL,CAAE,KAAQ,YACV,CAAE,KAAQ,WAAY,SAAY,CAAC,mBAAoB,oBACvD,CAAE,KAAQ,YACV,CAAE,KAAQ,WAAY,SAAY,CAAC,iBAAkB,wBAK3DC,EAAgB,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,kBAAmBC,EAAwB,EAAxBA,kBAAwB,EACvCC,IAAqB,IAAI,SAAAC,IACtDH,GAAsB,cAAYG,MAFkC,mBAClEA,EADkE,KACvDC,EADuD,KAIzE,OACI,kBAACC,EAAA,EAAD,KAEQN,EAAQO,KAAI,SAACC,EAAKC,GAAN,OACR,kBAACC,EAAA,EAAD,CACIC,IAAKH,EAAII,KACTC,QAAM,EACNC,SAAUV,EAAUW,SAASN,GAC7BO,QACI,SAAAC,GACQb,EAAUW,SAASN,GACnBJ,EAAaD,EAAUc,QAAO,SAAAC,GAAC,OAAIA,IAAMV,MAEzCJ,EAAaD,EAAUgB,OAAO,CAACX,IAAQY,UAKnD,kBAACC,EAAA,EAAD,CAAcC,QAASf,EAAII,OACzBJ,EAAIX,SACF,kBAAC2B,EAAA,EAAD,CAAYC,aAAW,mBAAmBC,KAAK,QAC3CV,QAAS,SAAAC,GAAC,OAAIf,EAAkBO,KAEhC,kBAAC,IAAD,OAJS,WAcnCkB,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAYC,EAAvB,EAAuBA,eAAvB,OAEb,kBAACC,EAAA,EAAD,CAAQlC,SAAU+B,EAAO/B,SAAUc,IAAKiB,EAAOhB,KAC3CoB,KAAMC,kBAAQ,CACVC,SAAU,CAAC,GAAI,IACfC,KAAMC,+BACF,uBAAGC,UAAU,8BACTC,MAAO,CAAEC,MAAQT,EAAkBD,EAAa,UAAY,UAAa,iBAKrF,kBAACW,EAAA,EAAD,KACSZ,EAAOhB,KAAO,QAAUgB,EAAO/B,SAAW,OAoGhD4C,EA/FH,WAAO,IAAD,EACoBC,IAAMC,SAAS,IADnC,mBACPvC,EADO,KACIC,EADJ,OAE0BqC,IAAMC,SAAS7C,EAAW,GAAG8C,MAFvD,mBAEPC,EAFO,KAEOC,EAFP,OAGgBJ,IAAMC,SAAS7C,GAH/B,mBAGPE,EAHO,KAGE+C,EAHF,OAIgBL,IAAMC,UAAS,GAJ/B,mBAIPK,EAJO,KAIEC,EAJF,KAMd,OACI,yBAAKZ,UAAU,OACX,kBAAC,IAAD,CAAYa,OAAQrD,EAAUsD,KAAM,GAChCb,MAAO,CAAEc,MAAO,OAAQC,OAAQ,SAChCrC,QAAS,SAAAC,GACL,IAAIqC,EAActD,EAAQuD,QACtBC,EAAoBF,EAAYG,MAAK,SAAAC,GAAC,OAAIA,EAAEd,OAASC,KAAcc,MACvEvD,EAAUwD,SAAQ,SAAAzC,GAAC,OAAIqC,EAAkBrC,GAAGtB,SAAW,CAACoB,EAAE4C,OAAOC,IAAK7C,EAAE4C,OAAOE,QAC/EhB,EAAWO,KAGf,kBAACU,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAGJlE,EAAQO,KAAI,SAAA4D,GACR,OAAInB,GAAYmB,EAAQvB,OAASC,EACtBsB,EAAQR,MAAMpD,KAAI,SAACC,EAAKC,GAC3B,OAAID,EAAIX,SACG,kBAAC,EAAD,CAAcc,IAAKH,EAAII,KAAMgB,OAAQpB,EACxCqB,WAAYzB,EAAUW,SAASN,GAC/BqB,eAAgBqC,EAAQvB,OAASC,IAG9B,QAIR,SAKvB,kBAACuB,EAAA,EAAD,CACI9B,MAAO,CAAEzC,SAAU,WAAYwE,IAAK,GAAIjB,MAAO,MAAOkB,MAAO,GAAIC,OAAQ,GAAIC,eAAgB,SAAUC,WAAY,SAAUC,OAAQ,MAErI,yBACIpC,MAAO,CAAEqC,OAAQ,KAEjB,yBAAKrC,MAAO,CAAEc,MAAO,SACjB,yBAAKd,MAAO,CAAEsC,QAAS,eAAgBC,cAAe,WAAYF,OAAQ,IACtE,kBAACG,EAAA,EAAD,CAAYC,GAAG,kBAAf,YACA,kBAACC,EAAA,EAAD,CAAQD,GAAG,iBAAiBxC,MAAM,UAAU0C,WAAY,CAAE,aAAc,oBACpEC,MAAOlC,EACPmC,SAAU,SAAAlE,GAAC,OAAIgC,EAAWhC,EAAEmE,OAAOC,aAG3C,yBAAK/C,MAAO,CAAEsC,QAAS,eAAgBC,cAAe,WAAYF,OAAQ,IACtE,kBAACG,EAAA,EAAD,CAAYC,GAAG,eAAf,eACA,kBAACO,EAAA,EAAD,CACIP,GAAG,cACHG,MAAOrC,EACPsC,SAAU,SAAAlE,GACN6B,EAAgB7B,EAAEmE,OAAOF,SAIzBlF,EAAQO,KAAI,SAAAC,GAAG,OAAI,kBAAC+E,EAAA,EAAD,CAAU5E,IAAKH,EAAIoC,KAAMsC,MAAO1E,EAAIoC,MAAOpC,EAAIoC,YAKlF,kBAAC,EAAD,CACI5C,QAASA,EAAQyD,MAAK,SAAAC,GAAC,OAAIA,EAAEd,OAASC,KAAcc,MACpD1D,kBAAmB,SAACG,GAAD,OAAeC,EAAaD,IAC/CF,kBAAmB,SAACO,GAChB,IAAI6C,EAActD,EAAQuD,QAC1BD,EAAYG,MAAK,SAAAC,GAAC,OAAIA,EAAEd,OAASC,KAAcc,MAAMlD,GAAOZ,cAAW2F,EACvEzC,EAAWO,OAIvB,kBAACmC,EAAA,EAAD,CACIV,GAAG,4BACHW,MAAM,OACNC,WAAS,EACTC,KAAK,KACLC,QAAS,WACTvD,MAAO,CAAEzC,SAAU,WAAY0E,OAAQ,GAAID,MAAO,GAAIwB,KAAM,GAAItB,eAAgB,UAChFS,WAAY,CAAE3C,MAAO,CAAEyD,SAAU,GAAIC,WAAY,IACjDd,MAAOe,KAAKC,UAAUlG,EAAS,KAAM,GACrCmF,SAAU,SAAAlE,GAAC,OAAI8B,EAAWkD,KAAKE,MAAMlF,EAAEmE,OAAOF,cCnK9CkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8091f82f.chunk.js","sourcesContent":["import { InputLabel, List, ListItem, ListItemText, MenuItem, Select, TextField, IconButton, Switch } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { divIcon } from 'leaflet';\nimport { Map as LeafletMap, Marker, Popup, TileLayer } from \"react-leaflet\";\n// import './App.css';\nimport useStateWithCallback from 'use-state-with-callback';\n\n\nconst position = [32.081128, 34.779729];\nconst theDevices = [\n    {\n        \"type\": \"wind\",\n        \"items\": [\n            { \"name\": \"Device 1\", \"position\": [32.08, 34.77] },\n            { \"name\": \"Device 2\" },\n            { \"name\": \"Device 3\", \"position\": [32.07, 34.78] },\n            { \"name\": \"Device 4\" }]\n    },\n    {\n        \"type\": \"water\",\n        \"items\": [\n            { \"name\": \"Device 5\" },\n            { \"name\": \"Device 6\", \"position\": [32.080320121040344, 34.78262901306153] },\n            { \"name\": \"Device 7\" },\n            { \"name\": \"Device 8\", \"position\": [32.0678106134499, 34.768552780151374] }\n        ]\n    }\n];\n\nconst DevicesOfType = ({ devices, onSelectionChange, onDisableLocation }) => {\n    const [selection, setSelection] = useStateWithCallback([], selection => {\n        (onSelectionChange || (() => { }))(selection)\n    });\n    return (\n        <List>\n            {\n                devices.map((dev, index) =>\n                    <ListItem\n                        key={dev.name}\n                        button\n                        selected={selection.includes(index)}\n                        onClick={\n                            e => {\n                                if (selection.includes(index)) {\n                                    setSelection(selection.filter(s => s !== index));\n                                } else {\n                                    setSelection(selection.concat([index]).sort());\n                                }\n                            }\n                        }\n                    >\n                        <ListItemText primary={dev.name} />\n                        {!dev.position ? null :\n                            <IconButton aria-label=\"Disable location\" size=\"small\"\n                                onClick={e => onDisableLocation(index)}\n                            >\n                                <LocationOnIcon />\n                            </IconButton>\n                        }\n                    </ListItem>\n                )\n            }\n        </List >\n    )\n}\n\nconst DeviceMarker = ({ device, isSelected, isTypeSelected }) =>\n    (\n        <Marker position={device.position} key={device.name}\n            icon={divIcon({\n                iconSize: [20, 20],\n                html: renderToStaticMarkup(\n                    <i className=\" fa fa-map-marker-alt fa-2x\"\n                        style={{ color: (isTypeSelected ? (isSelected ? '#297A31' : '#1B2C6F') : '#888888') }}\n                    />\n                )\n            })}\n        >\n            <Popup>\n                    {device.name + ' at (' + device.position + ')'}\n            </Popup>\n        </Marker >\n    )\n\nconst App = () => {\n    const [selection, setSelection] = React.useState([]);\n    const [selectedType, setSelectedType] = React.useState(theDevices[0].type);\n    const [devices, setDevices] = React.useState(theDevices);\n    const [showAll, setShowAll] = React.useState(false);\n\n    return (\n        <div className=\"App\">\n            <LeafletMap center={position} zoom={14}\n                style={{ width: '100%', height: '100vh' }}\n                onClick={e => {\n                    let tempDevices = devices.slice();\n                    let tempDevicesOfType = tempDevices.find(d => d.type === selectedType).items;\n                    selection.forEach(s => tempDevicesOfType[s].position = [e.latlng.lat, e.latlng.lng]);\n                    setDevices(tempDevices);\n                }}\n            >\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {\n                    devices.map(devType => {\n                        if (showAll || (devType.type === selectedType)) {\n                            return devType.items.map((dev, index) => {\n                                if (dev.position) {\n                                    return <DeviceMarker key={dev.name} device={dev}\n                                        isSelected={selection.includes(index)}\n                                        isTypeSelected={devType.type === selectedType}\n                                    />\n                                } else {\n                                    return null;\n                                }\n                            });\n                        } else {\n                            return null;\n                        }\n                    })\n                }\n            </LeafletMap>\n            <Paper\n                style={{ position: 'absolute', top: 50, width: '30%', right: 50, bottom: 50, justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}\n            >\n                <div\n                    style={{ margin: 10 }}\n                >\n                    <div style={{ width: '100%' }}>\n                        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n                            <InputLabel id=\"show-all-types\">Show all</InputLabel>\n                            <Switch id=\"show-all-types\" color=\"primary\" inputProps={{ 'aria-label': 'primary checkbox' }}\n                                value={showAll}\n                                onChange={e => setShowAll(e.target.checked)}\n                            />\n                        </div>\n                        <div style={{ display: 'inline-block', verticalAlign: 'text-top', margin: 5 }}>\n                            <InputLabel id=\"select-type\">Device Type</InputLabel>\n                            <Select\n                                id=\"select-type\"\n                                value={selectedType}\n                                onChange={e => {\n                                    setSelectedType(e.target.value);\n                                }}\n                            >\n                                {\n                                    devices.map(dev => <MenuItem key={dev.type} value={dev.type}>{dev.type}</MenuItem>)\n                                }\n                            </Select>\n                        </div>\n                    </div>\n                    <DevicesOfType\n                        devices={devices.find(d => d.type === selectedType).items}\n                        onSelectionChange={(selection) => setSelection(selection)}\n                        onDisableLocation={(index) => {\n                            let tempDevices = devices.slice();\n                            tempDevices.find(d => d.type === selectedType).items[index].position = undefined;\n                            setDevices(tempDevices);\n                        }}\n                    />\n                </div>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Json\"\n                    multiline\n                    rows=\"10\"\n                    variant={\"outlined\"}\n                    style={{ position: 'absolute', bottom: 10, right: 10, left: 10, justifyContent: 'center' }}\n                    inputProps={{ style: { fontSize: 10, lineHeight: 1 } }}\n                    value={JSON.stringify(devices, null, 2)}\n                    onChange={e => setDevices(JSON.parse(e.target.value))}\n                />\n            </Paper>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}